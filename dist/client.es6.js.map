{"version":3,"sources":["client.es6.js","helpers.es6.js","symbols.es6.js","configuration.es6.js","proxy.es6.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,ACLA;;;;;;;;;AASA,AAAO,SAAS,mBAAmB,CAAC,GAAG,CAAC;;IAEpC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;kBACf,MAAM,CAAC,CAAC,GAAG,KAAK,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;4CACjB,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;kBAClD,GAAG,CAAC,CAAC,GAAG,KAAK;;qBAEV,MAAM,KAAK,GAAG,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC;sCAC7B,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;yCAC3B,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;qBAEjD,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;kBAE5B,CAAC;kBACD,IAAI,CAAC,GAAG,CAAC,CAAC;;CAE3B;;;;;;;;;AASD,AAAO,SAAS,iBAAiB,EAAE;;IAE/B,MAAM,MAAM,GAAG,qBAAqB,CAAC;IACrC,MAAM,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;;IAEzC,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;;CAElC;;;;;;;;;;;AAWD,AAAO,SAAS,sBAAsB,CAAC,GAAG,EAAE,WAAW,CAAC;;IAEpD,MAAM,IAAI,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;;IAElF,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;;CAExC;;AC1DM,MAAM,YAAY,iBAAiB,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAC7E,AAAO,MAAM,UAAU,mBAAmB,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAC3E,AAAO,MAAM,0BAA0B,GAAG,MAAM,CAAC,wCAAwC,CAAC,CAAC;AAC3F,AAAO,MAAM,gBAAgB,aAAa,MAAM,CAAC,8BAA8B,CAAC,CAAC;;AAEjF,AAAO,MAAM,QAAQ,qBAAqB,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAC7E,AAAO,MAAM,IAAI,yBAAyB,MAAM,CAAC,sBAAsB,CAAC,CAAC;AACzE,AAAO,MAAM,KAAK,wBAAwB,MAAM,CAAC,uBAAuB,CAAC,CAAC;;AAE1E,AAAO,MAAM,GAAG,0BAA0B,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAC7E,AAAO,MAAM,IAAI,yBAAyB,MAAM,CAAC,2BAA2B,CAAC,CAAC;AAC9E,AAAO,MAAM,KAAK,wBAAwB,MAAM,CAAC,4BAA4B,CAAC,CAAC;AAC/E,AAAO,MAAM,IAAI,yBAAyB,MAAM,CAAC,2BAA2B,CAAC,CAAC;AAC9E,AAAO,MAAM,GAAG,0BAA0B,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAC7E,AAAO,MAAM,MAAM,uBAAuB,MAAM,CAAC,6BAA6B,CAAC,CAAC;AAChF,AAAO,MAAM,KAAK,wBAAwB,MAAM,CAAC,4BAA4B,CAAC,CAAC;AAC/E,AAAO,MAAM,OAAO,sBAAsB,MAAM,CAAC,8BAA8B,CAAC,CAAC;;ICI7E,eAAe;IACf,mBAAmB;IACnB,UAAU;IACV,WAAW;IACX,kBAAkB;AAEtB;;;;;;;;;;AAUA,eAAe,GAAG;;IAEd,MAAM,EAAE,KAAK;IACb,OAAO,EAAE,GAAG;IACZ,MAAM,EAAE,EAAE;IACV,KAAK,EAAE,EAAE,QAAQ,EAAE,iBAAiB,EAAE;;CAEzC,CAAC;;;;;;;;AAQF,mBAAmB,GAAG,EAAE,CAAC;;;;;;;;;AASzB,UAAU,GAAG,EAAE,CAAC;;;;;;;;;AAShB,WAAW,GAAG,EAAE,CAAC;;;;;;;;;AASjB,kBAAkB,GAAG,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BxB,MAAM,WAAW,GAAG,SAAS,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC;;IAE3D,QAAQ,IAAI;;QAER,KAAK,0BAA0B;aAC1B,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;aAC7E,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aAClC,MAAM;;QAEX,KAAK,gBAAgB;aAChB,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE;gDACpB,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aACrE,MAAM;;KAEd;;CAEJ,CAAC;;;;;;;;;;;;;;;AAeF,AAAe,MAAM,aAAa,CAAC;;;;;;;;;;;;;IAa/B,KAAK,UAAU,CAAC,EAAE;;QAEd,OAAO,UAAU,CAAC;;KAErB;;;;;;;;;;IAUD,KAAK,YAAY,CAAC,EAAE;;QAEhB,IAAI,QAAQ;YACR,aAAa;YACb,MAAM;YACN,KAAK;YACL,aAAa,CAAC;;QAElB,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,mBAAmB,CAAC,CAAC;QACnE,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,kBAAkB,CAAC,CAAC;QAC/E,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;;QAE9E,KAAK,GAAG,sBAAsB,CAAC,CAAC,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wCACxC,MAAM,CAAC,CAAC;QACxC,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;;QAE/B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;;QAEd,OAAO,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;;KAEhD;;;;;;;;;;;;;;IAcD,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;;QAEX,MAAM,CAAC,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;;QAExC,OAAO,KAAK,CAAC;;KAEhB;;;;;;;;;;;;;;IAcD,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;;QAEP,kBAAkB,GAAG,GAAG,CAAC;;QAEzB,OAAO,KAAK,CAAC;;KAEhB;;;;;;;;;;;;;;IAcD,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;;QAEb,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QACtB,WAAW,GAAG,EAAE,CAAC;QACjB,kBAAkB,GAAG,EAAE,CAAC;;QAExB,IAAI,QAAQ,EAAE;;YAEV,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;;SAE5D;;QAED,OAAO,KAAK,CAAC;;KAEhB;;;;;;;;;;;;;IAaD,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;;QAEN,WAAW,CAAC,0BAA0B,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;;QAEpD,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;IAaD,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;;QAEP,WAAW,CAAC,0BAA0B,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;;QAErD,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;IAaD,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;;QAER,WAAW,CAAC,0BAA0B,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;;QAEtD,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;;;;;IAiBD,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;;QAEX,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;;QAE/C,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;;;;;IAiBD,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;;QAEV,WAAW,CAAC,gBAAgB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;;QAE9C,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;;;;;IAiBD,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;;QAEb,WAAW,CAAC,gBAAgB,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;;QAEjD,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;;;;;IAiBD,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;;QAEZ,WAAW,CAAC,gBAAgB,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;QAEhD,OAAO,IAAI,CAAC;;KAEf;;;;;;;;;;;;;;;;;IAiBD,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;;QAEd,WAAW,CAAC,gBAAgB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;;QAElD,OAAO,IAAI,CAAC;;KAEf;;CAEJ;;AHvaD;;;;;;;;;;;;;;;;;;AAkBA,MAAM,WAAW,GAAG,SAAS,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC;;IAEnD,IAAI,iBAAiB;QACjB,oBAAoB;QACpB,WAAW;QACX,QAAQ;QACR,aAAa;QACb,YAAY,CAAC;;IAEjB,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,oBAAoB,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACnD,WAAW,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC5C,QAAQ,GAAG,iBAAiB,EAAE,CAAC;IAC/B,YAAY,GAAG,sBAAsB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;;IAExD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;;QAEpC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjD,aAAa,CAAC,GAAG,GAAG,YAAY,CAAC;QACjC,aAAa,CAAC,EAAE,GAAG,QAAQ,CAAC;QAC5B,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;;QAEhD,MAAM,CAAC,oBAAoB,CAAC,GAAG,SAAS,IAAI,CAAC;;YAEzC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACrD,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;YACpD,OAAO,CAAC,IAAI,CAAC,CAAC;;SAEjB,CAAC;;QAEF,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;;KAEjF,CAAC,CAAC;;CAEN,CAAC;;;;;;;;;;AAUF,AAAe,MAAM,UAAU,CAAC;;;;;;;;;;;;;;;;;;;IAmB5B,OAAO,KAAK,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC;;QAEhC,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;;YAE5B,OAAO,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;;SAErC;;QAED,OAAO,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;;KAE9B;;CAEJ;;AI9FD;;;;AAIA,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;AAoB1C,MAAM,WAAW,GAAG,SAAS,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,CAAC;;IAEpE,IAAI,UAAU;QACV,gBAAgB;QAChB,eAAe;QACf,YAAY;QACZ,UAAU;QACV,kBAAkB,CAAC;;IAEvB,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;IACvC,gBAAgB,GAAG,UAAU,CAAC,MAAM,CAAC;IACrC,eAAe,GAAG,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACjD,YAAY,GAAG,CAAC,OAAO,aAAa,CAAC,eAAe,CAAC,KAAK,UAAU,CAAC,CAAC;IACtE,UAAU,GAAG,YAAY,IAAI,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;+CAC/B,aAAa;+CACb,aAAa,CAAC,CAAC;IAC1D,kBAAkB,GAAG,CAAC,YAAY;yBACb,CAAC,UAAU;0BACV,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC;wCAClB,aAAa;wCACb,aAAa,CAAC,CAAC;;IAEnD,OAAO,CAAC,UAAU,IAAI,kBAAkB,CAAC;QACrC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,YAAY,CAAC,CAAC;YAC5D,eAAe,CAAC;;CAE3B,CAAC;;;;;;;;;;;;AAYF,MAAM,aAAa,GAAG,SAAS,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;;IAEnE,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;IAExC,OAAO,QAAQ,CAAC;;CAEnB;;;;;;;;;;;;AAYD,MAAM,eAAe,GAAG,IAAI,KAAK,CAAC,UAAU;AAC5C;;IAEI,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;;QAE3B,OAAO,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;;KAEnD;;IAED,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE;;QAElC,OAAO,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;;KAEtD;;CAEJ,CAAC,CAAC","file":"client.es6.js","sourcesContent":["import { objectToQueryString,\r\n         appendQueryStringToURL,\r\n         prefixedTimestamp } from './helpers.es6.js';\r\n\r\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n         \r\n/**\r\n * Fetches a remote JSON-encoded file via JSONP technique\r\n *  \r\n * @method _jsonpFetch\r\n * @for RestClient\r\n * @param {String} url A string containing the URL to which the request is sent\r\n * @param {Object} callback An object whose first key/value pair respectively contains\r\n *                          names of the JSONP callback querystring parameter and of its\r\n *                          related function meant to accept the JSON-encoded data as\r\n *                          an argument\r\n * @private\r\n * @return {Promise<any>}\r\n */\r\n         \r\nconst _jsonpFetch = function _jsonpFetch(url, callback){\r\n    \r\n    let callbackParamName,\r\n        callbackFunctionName,  \r\n        querystring,\r\n        scriptId,\r\n        scriptElement,\r\n        scriptSource;\r\n\r\n    callbackParamName = Object.keys(callback)[0];\r\n    callbackFunctionName = callback[callbackParamName];\r\n    querystring = objectToQueryString(callback);\r\n    scriptId = prefixedTimestamp();\r\n    scriptSource = appendQueryStringToURL(url, querystring);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        scriptElement = document.createElement('script');\r\n        scriptElement.src = scriptSource;\r\n        scriptElement.id = scriptId;\r\n        scriptElement.addEventListener('error', reject);\r\n\r\n        window[callbackFunctionName] = function(data){\r\n\r\n            Reflect.deleteProperty(window[callbackFunctionName]);\r\n            scriptElement.parentNode.removeChild(scriptElement);\r\n            resolve(data);\r\n\r\n        };\r\n\r\n        (document.getElementsByTagName('head')[0] ||\r\n                document.body || document.documentElement).appendChild(scriptElement);\r\n\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Proxy target object (reference: ~/src/proxy.es6.js);\r\n * provides logic to fetch remote resources\r\n *  \r\n * @class RestClient\r\n * @static\r\n */\r\n\r\nexport default class RestClient {\r\n\r\n    /**\r\n     * Wraps the native GlobalFetch.fetch method providing\r\n     * additional support for cross-domain fetching of\r\n     * JSON-encoded resources via JSONP technique\r\n     *  \r\n     * @method fetch\r\n     * @param {String} url A string containing the URL to which the request is sent\r\n     * @param {Object} initObj GlobalFetch.fetch initialization object\r\n     *                         (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @param {Object} callback An object whose first key/value pair respectively contains\r\n     *                          names of the JSONP callback querystring parameter and of its\r\n     *                          related function meant to accept the JSON-encoded data as\r\n     *                          an argument\r\n     * @return {Promise<Response>|Promise<any>}\r\n     * @static\r\n     */\r\n    \r\n    static fetch(url, initObj, callback){\r\n\r\n        if (initObj.method === 'jsonp') {\r\n\r\n            return _jsonpFetch(url, callback);\r\n\r\n        }\r\n\r\n        return fetch(url, initObj);\r\n\r\n    }\r\n\r\n}\r\n","/**\r\n * Given an object, serializes its own key/value pairs into\r\n * querystring; values can be either primitive types or\r\n * function expressions\r\n *\r\n * @param {Object} obj Object to be serialized into querystring\r\n * @return {String}\r\n */\r\n\r\nexport function objectToQueryString(obj){\r\n\r\n    return Object.keys(obj || {})\r\n                 .filter((key) => { return ((obj[key] !== '') &&\r\n                                            (obj[key] !== null)); })\r\n                 .map((key) => {\r\n                    \r\n                     const value = (typeof obj[key] === 'function') ?\r\n                                      encodeURIComponent(obj[key]()) :\r\n                                         encodeURIComponent(obj[key]);\r\n                    \r\n                     return `${key}=${value}`;\r\n\r\n                 })\r\n                 .join('&');\r\n\r\n}\r\n\r\n/**\r\n * Returns a string identifier composed by a prefix\r\n * followed by current timestamp\r\n *\r\n * @return {String}\r\n */\r\n \r\nexport function prefixedTimestamp(){\r\n    \r\n    const PREFIX = '__es6-rest-client__';\r\n    const TIMESTAMP = (new Date()).getTime();\r\n    \r\n    return `${PREFIX}${TIMESTAMP}`;\r\n    \r\n}\r\n\r\n/**\r\n * Allows to concatenate an existing URL with a querystring fragment\r\n *\r\n * @param {String} url URL to be concatenated with the given querystring\r\n * @return {String} queryString Querystring fragment to be appended\r\n *                              to the specified URL\r\n * @return {String}\r\n */\r\n\r\nexport function appendQueryStringToURL(url, queryString){\r\n    \r\n    const mark = (queryString) ? (((url || '').indexOf('?') === -1) ? '?' : '&') : '';\r\n    \r\n    return `${url}${mark}${queryString}`;\r\n    \r\n}\r\n\r\n","export const __COMPUTED__               = Symbol('ES6_REST_CLIENT_COMPUTED');\r\nexport const __ROUTES__                 = Symbol('ES6_REST_CLIENT_ROUTES');\r\nexport const __QUERYSTRING_PARAMETERS__ = Symbol('ES6_REST_CLIENT_QUERYSTRING_PARAMETERS');\r\nexport const __BODY_PAYLOAD__           = Symbol('ES6_REST_CLIENT_BODY_PAYLOAD');\r\n\r\nexport const SETTINGS                   = Symbol('ES6_REST_CLIENT_SETTINGS');\r\nexport const INIT                       = Symbol('ES6_REST_CLIENT_INIT');\r\nexport const RESET                      = Symbol('ES6_REST_CLIENT_RESET');\r\n\r\nexport const GET                        = Symbol('ES6_REST_CLIENT_HTTP_GET');\r\nexport const HEAD                       = Symbol('ES6_REST_CLIENT_HTTP_HEAD');\r\nexport const JSONP                      = Symbol('ES6_REST_CLIENT_HTTP_JSONP');\r\nexport const POST                       = Symbol('ES6_REST_CLIENT_HTTP_POST');\r\nexport const PUT                        = Symbol('ES6_REST_CLIENT_HTTP_PUT');\r\nexport const DELETE                     = Symbol('ES6_REST_CLIENT_HTTP_DELETE');\r\nexport const PATCH                      = Symbol('ES6_REST_CLIENT_HTTP_PATCH');\r\nexport const OPTIONS                    = Symbol('ES6_REST_CLIENT_HTTP_OPTIONS');\r\n","import { objectToQueryString,\r\n         appendQueryStringToURL,\r\n         prefixedTimestamp } from './helpers.es6.js';\r\n\r\nimport { __ROUTES__,\r\n         __COMPUTED__,\r\n         __QUERYSTRING_PARAMETERS__,\r\n         __BODY_PAYLOAD__,\r\n           SETTINGS,\r\n           INIT,\r\n           RESET,\r\n           GET, \r\n           HEAD,\r\n           JSONP,\r\n           POST, \r\n           PUT,\r\n           DELETE,\r\n           PATCH,\r\n           OPTIONS } from './symbols.es6.js';\r\n         \r\nlet defaultSettings,\r\n    userDefinedSettings,\r\n    properties,\r\n    querystring,\r\n    fetchConfiguration;\r\n    \r\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\n/**\r\n * Stores client default configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\ndefaultSettings = {\r\n    \r\n    method: 'get', \r\n    baseURI: '/',\r\n    params: {},\r\n    jsonp: { callback: prefixedTimestamp }\r\n\r\n};\r\n\r\n/**\r\n * Stores user defined client configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\nuserDefinedSettings = {};\r\n\r\n/**\r\n * Stores properties and methods names invoked on the\r\n * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n *\r\n * @type Array\r\n */\r\n\r\nproperties = [];\r\n\r\n/**\r\n * Stores key/value pairs meant to be\r\n * serialized into querystring\r\n *\r\n * @type Object\r\n */\r\n\r\nquerystring = {};\r\n\r\n/**\r\n * GlobalFetch.fetch method initialization object\r\n * (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n *\r\n * @type Object\r\n */\r\n\r\nfetchConfiguration = {};\r\n\r\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n\r\n /**\r\n  * Helps to configure the client by creating an initialization object suitable\r\n  * as an argument for the GlobalFetch.fetch method; will conveniently be turned into\r\n  * an higher-order function via ES7 decorator in the next releases\r\n  *  \r\n  * @method _httpMethod\r\n  * @param {Symbol} type Determines whether any contents should be sent\r\n  *                      as either querystring parameters or body payload\r\n  * @param {String} httpVerb HTTP method to be specified in the GlobalFetch.fetch\r\n  *                          initialization object (reference: ~/src/client.es6.js)\r\n  * @param {Object|\r\n  *         Blob|\r\n  *         BufferSource|\r\n  *         FormData|\r\n  *         URLSearchParams|\r\n  *         USVString} value Value to be either serialized to querystring or\r\n  *                          specified as body payload in the GlobalFetch.fetch\r\n  *                          initialization object, depending on the\r\n  *                          chosen HTTP method (reference: ~/src/client.es6.js)\r\n  *                                                                      \r\n  * @private\r\n  */\r\n\r\nconst _httpMethod = function _httpMethod(type, httpVerb, value){\r\n    \r\n    switch (type) {\r\n        \r\n        case __QUERYSTRING_PARAMETERS__:\r\n             fetchConfiguration = Object.assign({ method: httpVerb }, fetchConfiguration);\r\n             Object.assign(querystring, value);\r\n             break;\r\n            \r\n        case __BODY_PAYLOAD__:        \r\n             fetchConfiguration = Object.assign({ method: httpVerb },\r\n                                                (value) ? { body: value } : null);\r\n             break;\r\n        \r\n    }\r\n    \r\n};\r\n\r\n/************************************/\r\n/* class                            */\r\n/************************************/\r\n\r\n/**\r\n * Provides logic to store and parse configuration options, properties\r\n * and methods names invoked on the proxied RestClient class\r\n * (reference: ~/src/proxy.es6.js)\r\n *\r\n * @class Configuration\r\n * @constructor\r\n */\r\n\r\nexport default class Configuration {\r\n    \r\n    /************************************/\r\n    /* public methods                   */\r\n    /************************************/\r\n    \r\n    /**\r\n     * Gets an array of properties and methods names invoked on the\r\n     * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    \r\n    get [__ROUTES__](){\r\n\r\n        return properties;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Gets an array of values resulting from the parsing of currently\r\n     * stored client settings suitable as an argument to the RestClient class\r\n     * fetch() method (reference: ~/src/client.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    \r\n    get [__COMPUTED__](){\r\n\r\n        let settings,\r\n            configuration,\r\n            params,\r\n            route,\r\n            jsonPCallback;\r\n\r\n        settings = Object.assign({}, defaultSettings, userDefinedSettings);\r\n        configuration = Object.assign({ method: settings.method }, fetchConfiguration);\r\n        params = objectToQueryString(Object.assign({}, querystring, settings.params));\r\n        \r\n        route = appendQueryStringToURL((settings.baseURI + properties.join('/')),\r\n                                        params);\r\n        jsonPCallback = settings.jsonp;\r\n        \r\n        this[RESET]();\r\n\r\n        return [route, configuration, jsonPCallback];\r\n \r\n    }\r\n    \r\n    /**\r\n     * Allows to override client defaults with user defined settings,\r\n     * persisting them across subsequent calls, unless explicitly\r\n     * either modified or reset\r\n     *  \r\n     * @method settings\r\n     * @param {Object} obj An object containing key/value pairs meant\r\n     *                     to override client default settings\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n     \r\n    [SETTINGS](obj){\r\n         \r\n        Object.assign(userDefinedSettings, obj);\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Allows to specify a per-call initialization object suitable \r\n     * for the underlying call to the GlobalFetch.fetch method\r\n     * (reference: ~/src/client.es6.js)\r\n     *  \r\n     * @method init\r\n     * @param {Object} obj GlobalFetch.fetch initialization object\r\n     *                     (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [INIT](obj){\r\n    \r\n        fetchConfiguration = obj;\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Restores client settings (routes, querystring parameters,\r\n     * GlobalFetch.fetch initialization object, user defined settings)\r\n     * to their defaults\r\n     * \r\n     * @method reset\r\n     * @param {Boolean} [settings] Optionally allows to also clear any user defined\r\n     *                             settings specified via settings() method\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [RESET](settings){\r\n\r\n        properties.length = 0; \r\n        querystring = {};\r\n        fetchConfiguration = {};\r\n        \r\n        if (settings) {\r\n            \r\n            userDefinedSettings = Object.assign({}, defaultSettings);\r\n            \r\n        }\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP GET\r\n     * \r\n     * @method get\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [GET](obj){\r\n        \r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'get', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP HEAD\r\n     * \r\n     * @method head\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [HEAD](obj){\r\n\r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'head', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via JSONP technique\r\n     * \r\n     * @method jsonp\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [JSONP](obj){\r\n\r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'jsonp', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP POST\r\n     * \r\n     * @method post\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [POST](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'post', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PUT\r\n     * \r\n     * @method put\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [PUT](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'put', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP DELETE\r\n     * \r\n     * @method delete\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [DELETE](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'delete', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PATCH\r\n     * \r\n     * @method patch\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [PATCH](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'patch', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Configures the client to fetch a resource via HTTP OPTIONS\r\n     * \r\n     * @method options\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [OPTIONS](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'options', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n}\r\n","import Configuration from './configuration.es6.js';\r\nimport RestClient from './client.es6.js';\r\nimport { __ROUTES__, __COMPUTED__, GET } from './symbols.es6.js';\r\n\r\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\nconst configuration = new Configuration();\r\n\r\n/************************************/\r\n/* helper functions                 */\r\n/************************************/\r\n\r\n/**\r\n * Processes any method invokation on the proxied RestClient class by\r\n * checking whether the former exists in the definition of the latter: if positive,\r\n * configures the client with any provided arguments and forwards the call\r\n * to the original method implementation; if negative, stores the non-existing\r\n * method name as route fragment in the configuration and performs a default\r\n * get() method call on the target RestClient class interface.\r\n *\r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {Object} thisArg The 'this' argument for the call\r\n * @param {Array} argumentsList Array of arguments passed to the trapped method call\r\n * @return {RestClient|Promise<Response>|Promise<any>} \r\n */\r\n\r\nconst _trapMethod = function _trapMethod(target, thisArg, argumentsList){\r\n    \r\n    let properties,\r\n        propertiesLength,\r\n        currentProperty,\r\n        isMethodName,\r\n        isHTTPVerb,\r\n        hasDefaultHTTPVerb;\r\n\r\n    properties = configuration[__ROUTES__];\r\n    propertiesLength = properties.length;\r\n    currentProperty = properties[propertiesLength-1];\r\n    isMethodName = (typeof configuration[currentProperty] === 'function');\r\n    isHTTPVerb = isMethodName && Reflect.apply(configuration[properties.pop()],\r\n                                               configuration,\r\n                                               argumentsList);\r\n    hasDefaultHTTPVerb = !isMethodName &&\r\n                         !isHTTPVerb &&\r\n                          Reflect.apply(configuration[GET],\r\n                                        configuration,\r\n                                        argumentsList);\r\n        \r\n    return (isHTTPVerb || hasDefaultHTTPVerb) ?\r\n        Reflect.apply(target.fetch, target, configuration[__COMPUTED__]) :\r\n            restClientProxy;\r\n                    \r\n};\r\n\r\n/**\r\n * Processes any getter invokation on the proxied RestClient class\r\n * by storing properties keys as route fragments in the configuration object\r\n *  \r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {String} propKey The trapped property key\r\n * @param {Proxy} receiver The Proxy object applied to the RestClient class\r\n * @return {RestClient} \r\n */\r\n\r\nconst _trapProperty = function _trapProperty(target, propKey, receiver){\r\n    \r\n    configuration[__ROUTES__].push(propKey); \r\n\r\n    return receiver;\r\n\r\n}\r\n\r\n/************************************/\r\n/* library entry point              */\r\n/************************************/\r\n\r\n/**\r\n * Wraps the RestClient static class with a Proxy object\r\n * in order to trap and subsequently process any properties\r\n * and methods invoked on the former\r\n */\r\n\r\nconst restClientProxy = new Proxy(RestClient,\r\n{\r\n\r\n    get(target, propKey, receiver) {\r\n\r\n        return _trapProperty(target, propKey, receiver);\r\n\r\n    },\r\n\r\n    apply(target, thisArg, argumentsList) {\r\n\r\n        return _trapMethod(target, thisArg, argumentsList);\r\n\r\n    }\r\n\r\n});\r\n\r\nexport default restClientProxy;\r\n\r\nexport { INIT,\r\n         SETTINGS,\r\n         RESET,\r\n         GET, \r\n         HEAD,\r\n         JSONP,\r\n         POST, \r\n         PUT,\r\n         DELETE,\r\n         PATCH,\r\n         OPTIONS } from './symbols.es6.js';"],"sourceRoot":"/source/"}