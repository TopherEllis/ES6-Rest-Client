{"version":3,"sources":["client.umd.js","proxy.es6.js","helpers.es6.js","symbols.es6.js","configuration.es6.js","client.es6.js"],"names":["global","factory","define","amd","exports","mod","ES6RestClient","this","_classCallCheck","instance","Constructor","TypeError","objectToQueryString","obj","Object","keys","filter","key","map","value","encodeURIComponent","join","prefixedTimestamp","PREFIX","TIMESTAMP","Date","getTime","appendQueryStringToURL","url","queryString","mark","indexOf","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","__COMPUTED__","Symbol","__ROUTES__","__QUERYSTRING_PARAMETERS__","__BODY_PAYLOAD__","SETTINGS","INIT","RESET","GET","HEAD","JSONP","POST","PUT","DELETE","PATCH","OPTIONS","defaultSettings","userDefinedSettings","properties","querystring","fetchConfiguration","method","baseURI","params","jsonp","callback","_httpMethod","type","httpVerb","assign","body","Configuration","settings","payload","get","configuration","route","jsonPCallback","_jsonpFetch","callbackParamName","callbackFunctionName","scriptId","scriptElement","scriptSource","Promise","resolve","reject","document","createElement","src","id","addEventListener","window","data","Reflect","deleteProperty","parentNode","removeChild","getElementsByTagName","documentElement","appendChild","RestClient","_fetch","fetch","_x","_x2","_x3","apply","arguments","toString","initObj","_trapMethod","thisArg","argumentsList","propertiesLength","currentProperty","isMethodName","isHTTPVerb","hasDefaultHTTPVerb","pop","restClientProxy","_trapProperty","propKey","receiver","push","Proxy"],"mappings":"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","file":"client.umd.js","sourcesContent":[null,"import Configuration from './configuration.es6.js';\r\nimport RestClient from './client.es6.js';\r\nimport { __ROUTES__, __COMPUTED__, GET } from './symbols.es6.js';\r\n\r\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\nconst configuration = new Configuration();\r\n\r\n/************************************/\r\n/* helper functions                 */\r\n/************************************/\r\n\r\n/**\r\n * Processes any method invokation on the proxied RestClient class by\r\n * checking whether the former exists in the definition of the latter: if positive,\r\n * configures the client with any provided arguments and forwards the call\r\n * to the original method implementation; if negative, stores the non-existing\r\n * method name as route fragment in the configuration and performs a default\r\n * get() method call on the target RestClient class interface.\r\n *\r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {Object} thisArg The 'this' argument for the call\r\n * @param {Array} argumentsList Array of arguments passed to the trapped method call\r\n * @return {RestClient|Promise<Response>|Promise<any>} \r\n */\r\n\r\nconst _trapMethod = function _trapMethod(target, thisArg, argumentsList){\r\n    \r\n    let properties,\r\n        propertiesLength,\r\n        currentProperty,\r\n        isMethodName,\r\n        isHTTPVerb,\r\n        hasDefaultHTTPVerb;\r\n\r\n    properties = configuration[__ROUTES__];\r\n    propertiesLength = properties.length;\r\n    currentProperty = properties[propertiesLength-1];\r\n    isMethodName = (typeof configuration[currentProperty] === 'function');\r\n    isHTTPVerb = isMethodName && Reflect.apply(configuration[properties.pop()],\r\n                                               configuration,\r\n                                               argumentsList);\r\n    hasDefaultHTTPVerb = !isMethodName &&\r\n                         !isHTTPVerb &&\r\n                          Reflect.apply(configuration[GET],\r\n                                        configuration,\r\n                                        argumentsList);\r\n        \r\n    return (isHTTPVerb || hasDefaultHTTPVerb) ?\r\n        Reflect.apply(target.fetch, target, configuration[__COMPUTED__]) :\r\n            restClientProxy;\r\n                    \r\n};\r\n\r\n/**\r\n * Processes any getter invokation on the proxied RestClient class\r\n * by storing properties keys as route fragments in the configuration object\r\n *  \r\n * @param {RestClient} target The RestClient class to which the Proxy has been applied\r\n * @param {String} propKey The trapped property key\r\n * @param {Proxy} receiver The Proxy object applied to the RestClient class\r\n * @return {RestClient} \r\n */\r\n\r\nconst _trapProperty = function _trapProperty(target, propKey, receiver){\r\n    \r\n    configuration[__ROUTES__].push(propKey); \r\n\r\n    return receiver;\r\n\r\n}\r\n\r\n/************************************/\r\n/* library entry point              */\r\n/************************************/\r\n\r\n/**\r\n * Wraps the RestClient static class with a Proxy object\r\n * in order to trap and subsequently process any properties\r\n * and methods invoked on the former\r\n */\r\n\r\nconst restClientProxy = new Proxy(RestClient,\r\n{\r\n\r\n    get(target, propKey, receiver) {\r\n\r\n        return _trapProperty(target, propKey, receiver);\r\n\r\n    },\r\n\r\n    apply(target, thisArg, argumentsList) {\r\n\r\n        return _trapMethod(target, thisArg, argumentsList);\r\n\r\n    }\r\n\r\n});\r\n\r\nexport default restClientProxy;\r\n\r\nexport { INIT,\r\n         SETTINGS,\r\n         RESET,\r\n         GET, \r\n         HEAD,\r\n         JSONP,\r\n         POST, \r\n         PUT,\r\n         DELETE,\r\n         PATCH,\r\n         OPTIONS } from './symbols.es6.js';","/**\r\n * Given an object, serializes its own key/value pairs into\r\n * querystring; values can be either primitive types or\r\n * function expressions\r\n *\r\n * @param {Object} obj Object to be serialized into querystring\r\n * @return {String}\r\n */\r\n\r\nexport function objectToQueryString(obj){\r\n\r\n    return Object.keys(obj || {})\r\n                 .filter((key) => { return ((obj[key] !== '') &&\r\n                                            (obj[key] !== null)); })\r\n                 .map((key) => {\r\n                    \r\n                     const value = (typeof obj[key] === 'function') ?\r\n                                      encodeURIComponent(obj[key]()) :\r\n                                         encodeURIComponent(obj[key]);\r\n                    \r\n                     return `${key}=${value}`;\r\n\r\n                 })\r\n                 .join('&');\r\n\r\n}\r\n\r\n/**\r\n * Returns a string identifier composed by a prefix\r\n * followed by current timestamp\r\n *\r\n * @return {String}\r\n */\r\n \r\nexport function prefixedTimestamp(){\r\n    \r\n    const PREFIX = '__es6-rest-client__';\r\n    const TIMESTAMP = (new Date()).getTime();\r\n    \r\n    return `${PREFIX}${TIMESTAMP}`;\r\n    \r\n}\r\n\r\n/**\r\n * Allows to concatenate an existing URL with a querystring fragment\r\n *\r\n * @param {String} url URL to be concatenated with the given querystring\r\n * @return {String} queryString Querystring fragment to be appended\r\n *                              to the specified URL\r\n * @return {String}\r\n */\r\n\r\nexport function appendQueryStringToURL(url, queryString){\r\n    \r\n    const mark = (queryString) ? (((url || '').indexOf('?') === -1) ? '?' : '&') : '';\r\n    \r\n    return `${url}${mark}${queryString}`;\r\n    \r\n}\r\n\r\n","export const __COMPUTED__               = Symbol('ES6_REST_CLIENT_COMPUTED');\r\nexport const __ROUTES__                 = Symbol('ES6_REST_CLIENT_ROUTES');\r\nexport const __QUERYSTRING_PARAMETERS__ = Symbol('ES6_REST_CLIENT_QUERYSTRING_PARAMETERS');\r\nexport const __BODY_PAYLOAD__           = Symbol('ES6_REST_CLIENT_BODY_PAYLOAD');\r\n\r\nexport const SETTINGS                   = Symbol('ES6_REST_CLIENT_SETTINGS');\r\nexport const INIT                       = Symbol('ES6_REST_CLIENT_INIT');\r\nexport const RESET                      = Symbol('ES6_REST_CLIENT_RESET');\r\n\r\nexport const GET                        = Symbol('ES6_REST_CLIENT_HTTP_GET');\r\nexport const HEAD                       = Symbol('ES6_REST_CLIENT_HTTP_HEAD');\r\nexport const JSONP                      = Symbol('ES6_REST_CLIENT_HTTP_JSONP');\r\nexport const POST                       = Symbol('ES6_REST_CLIENT_HTTP_POST');\r\nexport const PUT                        = Symbol('ES6_REST_CLIENT_HTTP_PUT');\r\nexport const DELETE                     = Symbol('ES6_REST_CLIENT_HTTP_DELETE');\r\nexport const PATCH                      = Symbol('ES6_REST_CLIENT_HTTP_PATCH');\r\nexport const OPTIONS                    = Symbol('ES6_REST_CLIENT_HTTP_OPTIONS');\r\n","import { objectToQueryString,\r\n         appendQueryStringToURL,\r\n         prefixedTimestamp } from './helpers.es6.js';\r\n\r\nimport { __ROUTES__,\r\n         __COMPUTED__,\r\n         __QUERYSTRING_PARAMETERS__,\r\n         __BODY_PAYLOAD__,\r\n           SETTINGS,\r\n           INIT,\r\n           RESET,\r\n           GET, \r\n           HEAD,\r\n           JSONP,\r\n           POST, \r\n           PUT,\r\n           DELETE,\r\n           PATCH,\r\n           OPTIONS } from './symbols.es6.js';\r\n         \r\nlet defaultSettings,\r\n    userDefinedSettings,\r\n    properties,\r\n    querystring,\r\n    fetchConfiguration;\r\n    \r\n/************************************/\r\n/* default assignments              */\r\n/************************************/\r\n\r\n/**\r\n * Stores client default configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\ndefaultSettings = {\r\n    \r\n    method: 'get', \r\n    baseURI: '/',\r\n    params: {},\r\n    jsonp: { callback: prefixedTimestamp }\r\n\r\n};\r\n\r\n/**\r\n * Stores user defined client configuration settings\r\n *\r\n * @type Object\r\n */\r\n\r\nuserDefinedSettings = {};\r\n\r\n/**\r\n * Stores properties and methods names invoked on the\r\n * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n *\r\n * @type Array\r\n */\r\n\r\nproperties = [];\r\n\r\n/**\r\n * Stores key/value pairs meant to be\r\n * serialized into querystring\r\n *\r\n * @type Object\r\n */\r\n\r\nquerystring = {};\r\n\r\n/**\r\n * GlobalFetch.fetch method initialization object\r\n * (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n *\r\n * @type Object\r\n */\r\n\r\nfetchConfiguration = {};\r\n\r\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n\r\n /**\r\n  * Helps to configure the client by creating an initialization object suitable\r\n  * as an argument for the GlobalFetch.fetch method; will conveniently be turned into\r\n  * an higher-order function via ES7 decorator in the next releases\r\n  *  \r\n  * @method _httpMethod\r\n  * @param {Symbol} type Determines whether any contents should be sent\r\n  *                      as either querystring parameters or body payload\r\n  * @param {String} httpVerb HTTP method to be specified in the GlobalFetch.fetch\r\n  *                          initialization object (reference: ~/src/client.es6.js)\r\n  * @param {Object|\r\n  *         Blob|\r\n  *         BufferSource|\r\n  *         FormData|\r\n  *         URLSearchParams|\r\n  *         USVString} value Value to be either serialized to querystring or\r\n  *                          specified as body payload in the GlobalFetch.fetch\r\n  *                          initialization object, depending on the\r\n  *                          chosen HTTP method (reference: ~/src/client.es6.js)\r\n  *                                                                      \r\n  * @private\r\n  */\r\n\r\nconst _httpMethod = function _httpMethod(type, httpVerb, value){\r\n    \r\n    switch (type) {\r\n        \r\n        case __QUERYSTRING_PARAMETERS__:\r\n             fetchConfiguration = Object.assign({ method: httpVerb }, fetchConfiguration);\r\n             Object.assign(querystring, value);\r\n             break;\r\n            \r\n        case __BODY_PAYLOAD__:        \r\n             fetchConfiguration = Object.assign({ method: httpVerb },\r\n                                                (value) ? { body: value } : null);\r\n             break;\r\n        \r\n    }\r\n    \r\n};\r\n\r\n/************************************/\r\n/* class                            */\r\n/************************************/\r\n\r\n/**\r\n * Provides logic to store and parse configuration options, properties\r\n * and methods names invoked on the proxied RestClient class\r\n * (reference: ~/src/proxy.es6.js)\r\n *\r\n * @class Configuration\r\n * @constructor\r\n */\r\n\r\nexport default class Configuration {\r\n    \r\n    /************************************/\r\n    /* public methods                   */\r\n    /************************************/\r\n    \r\n    /**\r\n     * Gets an array of properties and methods names invoked on the\r\n     * proxied RestClient class (reference: ~/src/proxy.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    \r\n    get [__ROUTES__](){\r\n\r\n        return properties;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Gets an array of values resulting from the parsing of currently\r\n     * stored client settings suitable as an argument to the RestClient class\r\n     * fetch() method (reference: ~/src/client.es6.js)\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    \r\n    get [__COMPUTED__](){\r\n\r\n        let settings,\r\n            configuration,\r\n            params,\r\n            route,\r\n            jsonPCallback;\r\n\r\n        settings = Object.assign({}, defaultSettings, userDefinedSettings);\r\n        configuration = Object.assign({ method: settings.method }, fetchConfiguration);\r\n        params = objectToQueryString(Object.assign({}, querystring, settings.params));\r\n        \r\n        route = appendQueryStringToURL((settings.baseURI + properties.join('/')),\r\n                                        params);\r\n        jsonPCallback = settings.jsonp;\r\n        \r\n        this[RESET]();\r\n\r\n        return [route, configuration, jsonPCallback];\r\n \r\n    }\r\n    \r\n    /**\r\n     * Allows to override client defaults with user defined settings,\r\n     * persisting them across subsequent calls, unless explicitly\r\n     * either modified or reset\r\n     *  \r\n     * @method settings\r\n     * @param {Object} obj An object containing key/value pairs meant\r\n     *                     to override client default settings\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n     \r\n    [SETTINGS](obj){\r\n         \r\n        Object.assign(userDefinedSettings, obj);\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Allows to specify a per-call initialization object suitable \r\n     * for the underlying call to the GlobalFetch.fetch method\r\n     * (reference: ~/src/client.es6.js)\r\n     *  \r\n     * @method init\r\n     * @param {Object} obj GlobalFetch.fetch initialization object\r\n     *                     (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [INIT](obj){\r\n    \r\n        fetchConfiguration = obj;\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Restores client settings (routes, querystring parameters,\r\n     * GlobalFetch.fetch initialization object, user defined settings)\r\n     * to their defaults\r\n     * \r\n     * @method reset\r\n     * @param {Boolean} [settings] Optionally allows to also clear any user defined\r\n     *                             settings specified via settings() method\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [RESET](settings){\r\n\r\n        properties.length = 0; \r\n        querystring = {};\r\n        fetchConfiguration = {};\r\n        \r\n        if (settings) {\r\n            \r\n            userDefinedSettings = Object.assign({}, defaultSettings);\r\n            \r\n        }\r\n        \r\n        return false;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP GET\r\n     * \r\n     * @method get\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [GET](obj){\r\n        \r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'get', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP HEAD\r\n     * \r\n     * @method head\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [HEAD](obj){\r\n\r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'head', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via JSONP technique\r\n     * \r\n     * @method jsonp\r\n     * @param {Object} [obj] Object whose key/value pairs are meant\r\n     *                       to be serialized into querystring; values\r\n     *                       can be either primitive types or function expressions\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [JSONP](obj){\r\n\r\n        _httpMethod(__QUERYSTRING_PARAMETERS__, 'jsonp', obj);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP POST\r\n     * \r\n     * @method post\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [POST](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'post', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PUT\r\n     * \r\n     * @method put\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [PUT](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'put', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP DELETE\r\n     * \r\n     * @method delete\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [DELETE](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'delete', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n    /**\r\n     * Configures the client to fetch a resource via HTTP PATCH\r\n     * \r\n     * @method patch\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [PATCH](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'patch', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Configures the client to fetch a resource via HTTP OPTIONS\r\n     * \r\n     * @method options\r\n     * @param {Blob|\r\n     *         BufferSource|\r\n     *         FormData|\r\n     *         URLSearchParams|\r\n     *         USVString} [payload] Value meant to be specified as body payload\r\n     *                              in the underlying GlobalFetch.fetch implementation\r\n     *                              initialization object\r\n     * @return {Boolean} Determines whether the method should be\r\n     *                   marked as HTTP-related\r\n     */\r\n    \r\n    [OPTIONS](payload){\r\n\r\n        _httpMethod(__BODY_PAYLOAD__, 'options', payload);\r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n}\r\n","import { objectToQueryString,\r\n         appendQueryStringToURL,\r\n         prefixedTimestamp } from './helpers.es6.js';\r\n\r\n/************************************/\r\n/* private methods                  */\r\n/************************************/\r\n         \r\n/**\r\n * Fetches a remote JSON-encoded file via JSONP technique\r\n *  \r\n * @method _jsonpFetch\r\n * @for RestClient\r\n * @param {String} url A string containing the URL to which the request is sent\r\n * @param {Object} callback An object whose first key/value pair respectively contains\r\n *                          names of the JSONP callback querystring parameter and of its\r\n *                          related function meant to accept the JSON-encoded data as\r\n *                          an argument\r\n * @private\r\n * @return {Promise<any>}\r\n */\r\n         \r\nconst _jsonpFetch = function _jsonpFetch(url, callback){\r\n    \r\n    let callbackParamName,\r\n        callbackFunctionName,  \r\n        querystring,\r\n        scriptId,\r\n        scriptElement,\r\n        scriptSource;\r\n\r\n    callbackParamName = Object.keys(callback)[0];\r\n    callbackFunctionName = callback[callbackParamName];\r\n    querystring = objectToQueryString(callback);\r\n    scriptId = prefixedTimestamp();\r\n    scriptSource = appendQueryStringToURL(url, querystring);\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        scriptElement = document.createElement('script');\r\n        scriptElement.src = scriptSource;\r\n        scriptElement.id = scriptId;\r\n        scriptElement.addEventListener('error', reject);\r\n\r\n        window[callbackFunctionName] = function(data){\r\n\r\n            Reflect.deleteProperty(window[callbackFunctionName]);\r\n            scriptElement.parentNode.removeChild(scriptElement);\r\n            resolve(data);\r\n\r\n        };\r\n\r\n        (document.getElementsByTagName('head')[0] ||\r\n                document.body || document.documentElement).appendChild(scriptElement);\r\n\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Proxy target object (reference: ~/src/proxy.es6.js);\r\n * provides logic to fetch remote resources\r\n *  \r\n * @class RestClient\r\n * @static\r\n */\r\n\r\nexport default class RestClient {\r\n\r\n    /**\r\n     * Wraps the native GlobalFetch.fetch method providing\r\n     * additional support for cross-domain fetching of\r\n     * JSON-encoded resources via JSONP technique\r\n     *  \r\n     * @method fetch\r\n     * @param {String} url A string containing the URL to which the request is sent\r\n     * @param {Object} initObj GlobalFetch.fetch initialization object\r\n     *                         (reference: https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch#Parameters)\r\n     * @param {Object} callback An object whose first key/value pair respectively contains\r\n     *                          names of the JSONP callback querystring parameter and of its\r\n     *                          related function meant to accept the JSON-encoded data as\r\n     *                          an argument\r\n     * @return {Promise<Response>|Promise<any>}\r\n     * @static\r\n     */\r\n    \r\n    static fetch(url, initObj, callback){\r\n\r\n        if (initObj.method === 'jsonp') {\r\n\r\n            return _jsonpFetch(url, callback);\r\n\r\n        }\r\n\r\n        return fetch(url, initObj);\r\n\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}